import hre from "hardhat";
import * as readline from "readline";
import * as fs from "fs";
import path from "path";
import { fileURLToPath } from "url";
import { query0G } from "../utils/zeroG.js";

// Setup __dirname for ES modules
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// --- Helper to get deployed address ---
function getDeployedAddresses() {
  const filePath = path.join(__dirname, "..", "deployedAddresses.json");
  const addresses = JSON.parse(fs.readFileSync(filePath, "utf-8"));
  return addresses;
}

// --- Prompt helper ---
function promptUser(question: string): Promise<string> {
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
  });
  return new Promise((resolve) => {
    rl.question(question, (answer) => {
      rl.close();
      resolve(answer.trim());
    });
  });
}

async function main() {
  console.log("========================================");
  console.log("       CELL #3: THE RIDDLE OF AI");
  console.log("========================================\n");
  console.log("This puzzle is dynamically generated by 0G AI.");
  console.log("Solve the riddle to unlock your NFT reward.\n");

  // Load deployed contract address
  const { solidityCell: SOLIDITY_CELL_ADDRESS } = getDeployedAddresses();
  const { viem } = await hre.network.connect();
  const contract = await viem.getContractAt("SolidityCell", SOLIDITY_CELL_ADDRESS);
  const publicClient = await viem.getPublicClient();

  // 🧠 Ask AI for a riddle
  console.log("🤖 Generating riddle from 0G AI...");
  const riddlePrompt = `
Create a short riddle or logic puzzle where the answer is "Knowledge".
Make it cryptic, smart, and Ethereum-themed if possible — 2-3 sentences max.
Do not include the answer.
`;
  const aiRiddle = await query0G(riddlePrompt);
  console.log(`\n🧩 AI Riddle:\n${aiRiddle}\n`);

  let solved = false;

  while (!solved) {
    const userAnswer = await promptUser("Your answer: ");

    try {
      console.log("🔓 Submitting your answer to the contract...");
      const tx = await contract.write.solveCell3([userAnswer]);
      await publicClient.waitForTransactionReceipt({ hash: tx });

      console.log("🎉 Correct! You’ve solved the AI riddle.");

      // Mint the Proof of Escape NFT
      console.log("\n🏅 Minting your Proof of Escape NFT...");
      const nftTx = await contract.write.mintProofNFT();
      await publicClient.waitForTransactionReceipt({ hash: nftTx });

      console.log("✅ NFT minted successfully! Check your wallet.");
      solved = true;

    } catch (err: any) {
      console.error("\n❌ Incorrect answer.");
      if (err.shortMessage) {
        console.error("Revert Reason:", err.shortMessage);
      }

      console.log("\n🤖 Asking AI for a hint...");
      const aiHint = await query0G(`
The user was given this riddle:
"${aiRiddle}"

They guessed: "${userAnswer}"

The correct answer is "Knowledge". Without revealing it directly, provide a subtle hint to guide them.
`);
      console.log(`💡 AI Hint: ${aiHint}\n`);
    }
  }
}

main()
  .then(() => process.exit(0))
  .catch((err) => {
    console.error("Fatal Error:", err);
    process.exit(1);
  });
